{"version":3,"sources":["gameHelpers.js","tetrominos.js","hooks/usePlayer.js","hooks/useStage.js","components/styles/StyledTetris.js","components/styles/StyledTitle.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledButton.js","components/StartButton.js","components/Tetris.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","index.js","img/bg.jpg"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","Math","floor","random","usePlayer","useState","collided","setPlayer","resetPlayer","useCallback","STAGE_WIDTH","rotate","matrix","dir","rotatedTetro","map","_","index","col","row","reverse","prev","clonedPlayer","JSON","parse","stringify","offset","useStage","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","cell","forEach","value","reduce","ack","findIndex","unshift","push","sweepRows","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","StyledTitle","StyledStage","props","height","width","StyledCell","type","React","memo","Stage","key","StyledDisplay","gameOver","Display","text","StyledButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayerHorizontally","drop","console","log","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.024b90c8.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () =>\n  Array.from(Array(STAGE_HEIGHT), () =>\n    new Array(STAGE_WIDTH).fill([0, 'clear']),\n  );\n\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n  for (let y = 0; y < player.tetromino.length; y += 1) {\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\n      // 1. Check that we are on an actual Tetromino cell\n      if (player.tetromino[y][x] !== 0) {\n        if (\n          // 2. Check that our move is inside the game areas height (y)\n          !stage[y + player.pos.y + moveY] ||\n          // 3. Check that our move is inside the game areas width (x)\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n          // 4. Check that the cell we are moving to isn't set to clear\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\n            'clear'\n        ) {\n          return true;\n        }\n      }\n    }\n  }\n};\n","// prettier-ignore\nexport const TETROMINOS = {\n  0: { shape: [[0]], color: '0, 0, 0' },\n  I: {\n    shape: [\n            [0, 'I', 0, 0], \n            [0, 'I', 0, 0], \n            [0, 'I', 0, 0], \n            [0, 'I', 0, 0]\n        ],\n    color: '80, 227, 230',\n  },\n  J: {\n      shape: [\n        [0, 'J', 0], \n        [0, 'J', 0], \n        ['J', 'J', 0], \n      ],\n      color: '36, 95, 223',\n  },\n  L: {\n    shape: [\n      [0, 'L', 0], \n      [0, 'L', 0], \n      [0, 'L', 'L'], \n    ],\n    color: '223, 173, 36',\n\t},\n\tO: {\n    shape: [\n      ['0', '0'], \n\t\t\t['0', '0'], \n    ],\n    color: '223, 217, 36',\n\t},\n\tS: {\n    shape: [\n      [0, 'S', 'S'], \n      ['S', 'S', 0], \n      [0, 0, 0], \n    ],\n    color: '48, 211, 56',\n\t},\n\tT: {\n    shape: [\n\t\t\t[0, 0, 0], \n\t\t\t['T', 'T', 'T'], \n\t\t\t['0', 'T', 0], \n    ],\n    color: '132, 61, 198',\n\t},\n\tZ: {\n    shape: [\n\t\t\t['Z', 'Z', 0], \n\t\t\t[0, 'Z', 'Z'], \n\t\t\t[0, 0, 0], \n    ],\n    color: '227, 78, 78',\n\t},\n};\n\nexport const randomTetromino = () => {\n  const tetrominos = 'IJLOSTZ';\n  const randomTetromino =\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\n  return TETROMINOS[randomTetromino];\n};\n","import { useState, useCallback } from 'react';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n  });\n\n  const updatePlayerPos = ({ x, y, collided }) => {\n    setPlayer(prev => ({\n      ...prev,\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\n      collided,\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n      tetromino: randomTetromino().shape,\n      collided: false,\n    });\n  }, []);\n\n  const rotate = (matrix, dir) => {\n    // Make the rows to become cols\n    const rotatedTetro = matrix.map((_, index) =>\n      matrix.map(col => col[index]),\n    );\n\n    //Reverse each row to get a rotated matrix\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\n    return rotatedTetro.reverse();\n  };\n\n  const playerRotate = (stage, dir) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1)); //Forward and backwards movement\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n\n    setPlayer(clonedPlayer);\n  };\n\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n","import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const sweepRows = newStage =>\n      newStage.reduce((ack, row) => {\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\n          setRowsCleared(prev => prev + 1);\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n          return ack;\n        }\n        ack.push(row);\n        return ack;\n      }, []);\n\n    const updateStage = prevStage => {\n      const newStage = prevStage.map(row =>\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\n      );\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value,\n              `${player.collided ? 'merged' : 'clear'}`,\n            ];\n          }\n        });\n      });\n\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [\n    player.collided,\n    player.pos.x,\n    player.pos.y,\n    player.tetromino,\n    resetPlayer,\n  ]);\n\n  return [stage, setStage, rowsCleared];\n};\n","import styled from 'styled-components/macro';\nimport bgImage from '../../img/bg.jpg';\n\nexport const StyledTetrisWrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background: url(${bgImage}) #000;\n  background-size: cover;\n  overflow: hidden;\n`;\n\nexport const StyledTetris = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-start;\n  padding: 40px;\n  margin: 0 auto;\n\n  @media only screen and (max-width: 480px) {\n    flex-direction: column;\n  }\n\n  aside {\n    width: 100%;\n    max-width: 200px;\n    display: block;\n    padding: 0 20px;\n\n    @media only screen and (max-width: 480px) {\n      margin: 50px auto 0;\n      padding: 0;\n    }\n  }\n`;\n","import styled from 'styled-components/macro';\n\nexport const StyledTitle = styled.div`\n  padding: 40px 0 0 40px;\n\n  h1 {\n    color: #fff;\n    font-family: PressStart2P, Arial, Helvetica, sans-serif;\n  }\n`;\n","import styled from 'styled-components/macro';\n\nexport const StyledStage = styled.div`\n  display: grid;\n  grid-template-rows: repeat(\n    ${props => props.height},\n    calc(20vw / ${props => props.width})\n  );\n  grid-template-columns: repeat(${props => props.width}, 1fr);\n  grid-gap: 1px;\n  border: 2px solid #333;\n  width: 100%;\n  max-width: 20vw;\n  background: #111;\n\n  @media only screen and (max-width: 1024px) {\n    grid-template-rows: repeat(\n      ${props => props.height},\n      calc(45vw / ${props => props.width})\n    );\n    max-width: 45vw;\n  }\n\n  @media only screen and (max-width: 768px) {\n    grid-template-rows: repeat(\n      ${props => props.height},\n      calc(40vw / ${props => props.width})\n    );\n    max-width: 40vw;\n  }\n\n  @media only screen and (max-width: 480px) {\n    grid-template-rows: repeat(\n      ${props => props.height},\n      calc(50vw / ${props => props.width})\n    );\n    max-width: 50vw;\n    margin: 0 auto;\n  }\n`;\n","import styled from 'styled-components/macro';\n\nexport const StyledCell = styled.div`\n  width: auto;\n  background: rgba(${props => props.color}, 0.8);\n  border: ${props => (props.type === 0 ? '0 solid' : '4px solid')};\n  border-bottom-color: rgba(${props => props.color}, 0.1);\n  border-right-color: rgba(${props => props.color}, 1);\n  border-top-color: rgba(${props => props.color}, 1);\n  border-left-color: rgba(${props => props.color}, 0.3);\n`;\n","import React from 'react';\nimport { StyledCell } from './styles/StyledCell';\nimport { TETROMINOS } from '../tetrominos';\n\n// React.memo makes sure we only re-render the changed cells\nconst Cell = ({ type }) => (\n  <StyledCell type={type} color={TETROMINOS[type].color} />\n);\n\nexport default React.memo(Cell);\n","import React from 'react';\nimport { StyledStage } from './styles/StyledStage';\nimport Cell from './Cell';\n\nconst Stage = ({ stage }) => (\n  <StyledStage width={stage[0].length} height={stage.length}>\n    {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\n  </StyledStage>\n);\n\nexport default Stage;\n","import styled from 'styled-components/macro';\n\nexport const StyledDisplay = styled.div`\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  margin: 0 0 10px 0;\n  padding: 20px;\n  border: 4px solid #333;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  color: ${props => (props.gameOver ? 'red' : '#999')};\n  background: #000;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 0.8rem;\n`;\n","import React from 'react';\nimport { StyledDisplay } from './styles/StyledDisplay';\n\nconst Display = ({ gameOver, text }) => (\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\n);\n\nexport default Display;\n","import styled from 'styled-components/macro';\n\nexport const StyledButton = styled.button`\n  box-sizing: border-box;\n  margin: 0 0 20px 0;\n  padding: 15px;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 15px;\n  border: none;\n  text-align: center;\n  color: #fff;\n  background: #7b1fa2;\n  box-shadow: 0 5px #666;\n  font-size: 1rem;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  outline: none;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #6a1b9a;\n  }\n\n  &:active {\n    box-shadow: 0 3px #333;\n    transform: translateY(4px);\n  }\n`;\n","import React from 'react';\nimport { StyledButton } from './styles/StyledButton';\n\nconst StartButton = ({ callback }) => (\n  <StyledButton onClick={callback}>Start Game</StyledButton>\n);\n\nexport default StartButton;\n","import React, { useState } from 'react';\nimport { createStage, checkCollision } from '../gameHelpers';\n\n// Custom Hooks\nimport { useInterval } from '../hooks/useInterval';\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\nimport { useGameStatus } from '../hooks/useGameStatus';\n\n// Styled Components\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\nimport { StyledTitle } from './styles/StyledTitle';\n\n// Components\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\n\nconst Tetris = () => {\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\n    rowsCleared,\n  );\n\n  const startGame = () => {\n    // Reset everything\n    setStage(createStage());\n    setDropTime(1000);\n    resetPlayer();\n    setScore(0);\n    setLevel(0);\n    setRows(0);\n    setGameOver(false);\n  };\n\n  const movePlayerHorizontally = dir => {\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\n      updatePlayerPos({ x: dir, y: 0 });\n    }\n  };\n\n  const drop = () => {\n    // Increase level when player has cleared 10 rows\n    if (rows > (level + 1) * 10) {\n      setLevel(prev => prev + 1);\n      // Also increase speed\n      setDropTime(1000 / (level + 1) + 200);\n    }\n\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n      updatePlayerPos({ x: 0, y: 1, collided: false });\n    } else {\n      // Game over!\n      if (player.pos.y < 1) {\n        console.log('GAME OVER!!!');\n        setGameOver(true);\n        setDropTime(null);\n      }\n      updatePlayerPos({ x: 0, y: 0, collided: true });\n    }\n  };\n\n  const keyUp = ({ keyCode }) => {\n    if (!gameOver) {\n      if (keyCode === 40) {\n        //Down key\n        setDropTime(1000 / (level + 1) + 200);\n      }\n    }\n  };\n\n  const dropPlayer = () => {\n    setDropTime(null);\n    drop();\n  };\n\n  const move = ({ keyCode }) => {\n    if (!gameOver) {\n      if (keyCode === 37) {\n        // Left arrow\n        movePlayerHorizontally(-1);\n      } else if (keyCode === 39) {\n        //Right arrow\n        movePlayerHorizontally(1);\n      } else if (keyCode === 40) {\n        //Down arrow\n        dropPlayer();\n      } else if (keyCode === 38) {\n        //Up arrow\n        playerRotate(stage, 1);\n      }\n    }\n  };\n\n  useInterval(() => {\n    drop();\n  }, dropTime);\n\n  return (\n    <StyledTetrisWrapper\n      role=\"button\"\n      tabIndex=\"0\"\n      onKeyDown={e => move(e)}\n      onKeyUp={keyUp}\n    >\n      <StyledTitle>\n        <h1>React Tetris</h1>\n      </StyledTitle>\n      <StyledTetris>\n        <Stage stage={stage} />\n        <aside>\n          {gameOver ? (\n            <Display gameOver={gameOver} text=\"GameOver\" />\n          ) : (\n            <div>\n              <Display text={`Score: ${score}`} />\n              <Display text={`Rows: ${rows}`} />\n              <Display text={`Level: ${level}`} />\n            </div>\n          )}\n          <StartButton callback={startGame} />\n        </aside>\n      </StyledTetris>\n    </StyledTetrisWrapper>\n  );\n};\n\nexport default Tetris;\n","import { useState, useEffect, useCallback } from 'react';\n\nexport const useGameStatus = rowsCleared => {\n  const [score, setScore] = useState(0);\n  const [rows, setRows] = useState(0);\n  const [level, setLevel] = useState(0);\n\n  const linePoints = [40, 100, 300, 1200];\n\n  const calcScore = useCallback(() => {\n    // We have score\n    if (rowsCleared > 0) {\n      // This is how original Tetris score is calculated\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n      setRows(prev => prev + rowsCleared);\n    }\n  }, [level, linePoints, rowsCleared]);\n\n  useEffect(() => {\n    calcScore();\n  }, [calcScore, rowsCleared, score]);\n\n  return [score, setScore, rows, setRows, level, setLevel];\n};\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/bg.93e70a2a.jpg\";"],"sourceRoot":""}